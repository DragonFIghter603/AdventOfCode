with open('input.txt') as infile:
    data = [row.strip() for row in infile.readlines()]

# x=14, y=11
# frequency: 56000011
# data = [
#     'Sensor at x=2, y=18: closest beacon is at x=-2, y=15',
#     'Sensor at x=9, y=16: closest beacon is at x=10, y=16',
#     'Sensor at x=13, y=2: closest beacon is at x=15, y=3',
#     'Sensor at x=12, y=14: closest beacon is at x=10, y=16',
#     'Sensor at x=10, y=20: closest beacon is at x=10, y=16',
#     'Sensor at x=14, y=17: closest beacon is at x=10, y=16',
#     'Sensor at x=8, y=7: closest beacon is at x=2, y=10',
#     'Sensor at x=2, y=0: closest beacon is at x=2, y=10',
#     'Sensor at x=0, y=11: closest beacon is at x=2, y=10',
#     'Sensor at x=20, y=14: closest beacon is at x=25, y=17',
#     'Sensor at x=17, y=20: closest beacon is at x=21, y=22',
#     'Sensor at x=16, y=7: closest beacon is at x=15, y=3',
#     'Sensor at x=14, y=3: closest beacon is at x=15, y=3',
#     'Sensor at x=20, y=1: closest beacon is at x=15, y=3',
# ]


class Sensor:
    def __init__(self, p, b):
        self.pos = p
        self.beacon = b
        self.dist = abs(b[0]-p[0]) + abs(b[1]-p[1])


sensors = []

for d in data:
    _, _, px, py, _, _, _, _, bx, by = d.strip().split()
    p = int(px[2:-1]), int(py[2:-1])
    b = int(bx[2:-1]), int(by[2:])
    sensors.append(Sensor(p, b))

possible_ranges = []

# for y in range(0, 4_000_000, 5000):
#     for x in range(0, 4_000_000, 5000):
#         max_d = 0
#         for sensor in sensors:
#             d = abs(x - sensor.pos[0]) + abs(y - sensor.pos[1])
#             max_d = max(max_d, (sensor.dist - d))
#         if max_d < 5000:
#             possible_ranges.append(((x, y), max_d))
#     if y % 500_000 == 0:
#         print(y / 4_000_000)
#
# print(f'possible_ranges: {possible_ranges}')
possible_ranges = [((20000, 1235000), 161), ((20000, 1240000), 4993), ((0, 1245000), 4949), ((1645000, 1950000), 4525), ((1645000, 1955000), 952), ((1650000, 1955000), 4048), ((1650000, 1960000), 952), ((1655000, 1960000), 4048), ((1655000, 1965000), 952), ((1660000, 1965000), 4048), ((1660000, 1970000), 952), ((1665000, 1970000), 4048), ((1665000, 1975000), 952), ((1670000, 1975000), 4048), ((1670000, 1980000), 952), ((1675000, 1980000), 4048), ((1675000, 1985000), 952), ((1680000, 1985000), 4048), ((1680000, 1990000), 952), ((1685000, 1990000), 4048), ((1685000, 1995000), 952), ((1690000, 1995000), 4048), ((1690000, 2000000), 952), ((1695000, 2000000), 4048), ((3340000, 2450000), 2737), ((3340000, 2455000), 4243), ((3345000, 2455000), 757), ((3345000, 2460000), 4243), ((3350000, 2460000), 757), ((3350000, 2465000), 4243), ((3355000, 2465000), 757), ((3355000, 2470000), 4243), ((3360000, 2470000), 757), ((3360000, 2475000), 4243), ((3365000, 2475000), 757), ((3365000, 2480000), 4243), ((3370000, 2480000), 757), ((3370000, 2485000), 4243), ((3375000, 2485000), 757), ((3375000, 2490000), 4243), ((3380000, 2490000), 757), ((3380000, 2495000), 4243), ((3385000, 2495000), 757), ((3385000, 2500000), 4243), ((3390000, 2500000), 757), ((3390000, 2505000), 4243), ((3395000, 2505000), 757), ((3395000, 2510000), 4243), ((3400000, 2510000), 757), ((3400000, 2515000), 4243), ((3405000, 2515000), 757), ((3405000, 2520000), 4243), ((3410000, 2520000), 757), ((3410000, 2525000), 4243), ((3415000, 2525000), 757), ((3415000, 2530000), 4243), ((3420000, 2530000), 757), ((3420000, 2535000), 4243), ((3425000, 2535000), 757), ((3425000, 2540000), 4243), ((3430000, 2540000), 757), ((3430000, 2545000), 4243), ((3435000, 2545000), 757), ((3435000, 2550000), 4243), ((3440000, 2550000), 757), ((3440000, 2555000), 4243), ((3445000, 2555000), 757), ((3445000, 2560000), 4243), ((3450000, 2560000), 757), ((3450000, 2565000), 4243), ((3455000, 2565000), 757), ((3455000, 2570000), 4243), ((3460000, 2570000), 757), ((3460000, 2575000), 4243), ((3465000, 2575000), 757), ((3465000, 2580000), 4243), ((3470000, 2580000), 757), ((3470000, 2585000), 4243), ((3475000, 2585000), 757), ((3475000, 2590000), 4243), ((3480000, 2590000), 757), ((3480000, 2595000), 4243), ((3485000, 2595000), 757), ((3485000, 2600000), 4243), ((3490000, 2600000), 757), ((3490000, 2605000), 4243), ((3495000, 2605000), 757), ((3495000, 2610000), 4243), ((3500000, 2610000), 757), ((3500000, 2615000), 4243), ((3505000, 2615000), 757), ((3505000, 2620000), 4243), ((3510000, 2620000), 757), ((3510000, 2625000), 4243), ((3515000, 2625000), 757), ((3515000, 2630000), 4243), ((3520000, 2630000), 757), ((3520000, 2635000), 4243), ((3525000, 2635000), 757), ((3525000, 2640000), 4243), ((3530000, 2640000), 757), ((3530000, 2645000), 4243), ((3535000, 2645000), 757), ((3535000, 2650000), 4243), ((3540000, 2650000), 757), ((3540000, 2655000), 4243), ((3545000, 2655000), 757), ((3545000, 2660000), 4243), ((3550000, 2660000), 757), ((3550000, 2665000), 4243), ((3555000, 2665000), 757), ((3555000, 2670000), 4243), ((3560000, 2670000), 757), ((3560000, 2675000), 4243), ((3565000, 2675000), 757), ((3565000, 2680000), 4243), ((3570000, 2680000), 757), ((3570000, 2685000), 4243), ((3575000, 2685000), 757), ((3575000, 2690000), 4243), ((3580000, 2690000), 757), ((3580000, 2695000), 4243), ((3585000, 2695000), 757), ((3585000, 2700000), 4243), ((3590000, 2700000), 757), ((3590000, 2705000), 4243), ((3595000, 2705000), 757), ((3595000, 2710000), 4243), ((3600000, 2710000), 757), ((3600000, 2715000), 4243), ((3605000, 2715000), 757), ((3605000, 2720000), 4243), ((3610000, 2720000), 757), ((3610000, 2725000), 4243), ((3615000, 2725000), 757), ((3615000, 2730000), 4243), ((3620000, 2730000), 757), ((3620000, 2735000), 4243), ((3625000, 2735000), 757), ((3625000, 2740000), 4243), ((3630000, 2740000), 757), ((3630000, 2745000), 4243), ((3635000, 2745000), 757), ((3635000, 2750000), 4243), ((3640000, 2750000), 757), ((3640000, 2755000), 4243), ((3645000, 2755000), 757), ((3645000, 2760000), 4243), ((3650000, 2760000), 757), ((3650000, 2765000), 4243), ((3655000, 2765000), 757), ((3655000, 2770000), 4243), ((3660000, 2770000), 757), ((3660000, 2775000), 4243), ((3665000, 2775000), 757), ((3665000, 2780000), 4243), ((3670000, 2780000), 757), ((3670000, 2785000), 4243), ((3675000, 2785000), 757), ((3675000, 2790000), 4243), ((3680000, 2790000), 757), ((3680000, 2795000), 4243), ((3685000, 2795000), 757), ((3685000, 2800000), 4243), ((3690000, 2800000), 757), ((3690000, 2805000), 4243), ((3695000, 2805000), 757), ((3695000, 2810000), 4243), ((3700000, 2810000), 757), ((3700000, 2815000), 4243), ((3705000, 2815000), 757), ((3705000, 2820000), 4243), ((3710000, 2820000), 757), ((3710000, 2825000), 4243), ((3715000, 2825000), 757), ((3715000, 2830000), 4243), ((3720000, 2830000), 757), ((3720000, 2835000), 4243), ((3725000, 2835000), 757), ((3725000, 2840000), 4243), ((3730000, 2840000), 757), ((3730000, 2845000), 4243), ((3735000, 2845000), 757), ((3735000, 2850000), 4243), ((3740000, 2850000), 757), ((3740000, 2855000), 4243), ((3745000, 2855000), 757), ((3745000, 2860000), 4243), ((3750000, 2860000), 757), ((3750000, 2865000), 4243), ((3755000, 2865000), 757), ((3755000, 2870000), 4243), ((3760000, 2870000), 757), ((3760000, 2875000), 4243), ((3765000, 2875000), 757), ((3765000, 2880000), 4243), ((3770000, 2880000), 757), ((3770000, 2885000), 4243), ((3775000, 2885000), 757), ((3775000, 2890000), 4243), ((3780000, 2890000), 757), ((3780000, 2895000), 4243), ((3785000, 2895000), 757), ((3785000, 2900000), 4243), ((3790000, 2900000), 757), ((3790000, 2905000), 4243), ((3795000, 2905000), 757), ((3795000, 2910000), 4243), ((2010000, 3290000), 1515), ((2010000, 3295000), 4455), ((2720000, 3365000), 3831), ((2720000, 3370000), 3395)]

possible_sub_ranges = []

for i, (r, d) in enumerate(possible_ranges):
    for y in range(r[1] - 5000, r[1] + 5000, 100):
        for x in range(r[0] - 5000, r[0] + 5000, 100):
            max_d = 0
            for sensor in sensors:
                d = abs(x - sensor.pos[0]) + abs(y - sensor.pos[1])
                max_d = max(max_d, (sensor.dist - d))
            if max_d < 500:
                possible_sub_ranges.append(((x, y), max_d))
    if i % 25 == 0:
        print(i / len(possible_ranges))

print(f'possible_sub_ranges: {possible_sub_ranges}')

for i, (r, d) in enumerate(possible_sub_ranges):
    point_zero = []
    for y in range(r[1] - 100, r[1] + 100):
        for x in range(r[0] - 100, r[0] + 100):
            max_d = 0
            for sensor in sensors:
                if (x, y) != sensor.beacon:
                    d = abs(x - sensor.pos[0]) + abs(y - sensor.pos[1])
                    max_d = max(max_d, sensor.dist - d)
                else:
                    break
            else:
                if max_d <= 0:
                    point_zero.append(((x, y), max_d))
            c = chr(ord('a') + max_d // 10)
            #print(c, end='')
        #print()
    for point in point_zero:
            print(f'FOUND: {point}')
            print(f'frequency: {point[0][0] * 4_000_000 + point[0][1]}')
    print()
    if i % 25 == 0:
        print(i / len(possible_ranges))

# FOUND: (3341099, 2451856)
# frequency: 13364398451856